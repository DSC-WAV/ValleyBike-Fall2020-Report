[["secondary-stops-graham.html", "8 Secondary Stops- Graham 8.1 Secondary Stops 8.2 All Secondary Stops", " 8 Secondary Stops- Graham 8.1 Secondary Stops One other key question we wanted to focus on was identifying and focusing on secondary stops, or those that start a ride at a certain station, stopped the bike somewhere that wasnâ€™t a station, and then started up a ride with the same bike shortly after continuing on in their route. The insights gained from looking into these types of rides could give especially helpful information on where to potentially put in new stations, since we would be identifying locations where people are stopping their rides frequently. After identifying the 5 rides that had secondary stops in the middle of the rides, we then focused on visualizing the rides themselves and where the stops took place. This involved for each of the separate rides, plotting an icon where each of the stops took place as well as where the starting and stop stations are. This also involved plotting the two separate trips, the part before the stop and the part after the stop, on a map to identify exactly where the routes themselves go. This can allow one to identify exactly where the stop took place and this can lead to future work where we look into more rides to identify where a lot of these secondary stops are taking place, in order to potentially identify locations for future stations to be put in. One of the last parts of for this task involved building a table thats connected to the rides themselves. Since it sometimes can be hard to identify where exactly the starting and ending locations of the trips themselves, by pairing this with the information provided by the table, we can start to look identify not only where the routes themselves went, but can look into how long the user stopped for and how longs the total trip was. All this information can be used to paint a more complete picture of the rides themselves and be able to gain insights on who the type of rider might be any why they might be stopping in the location they end up stopping in. get_base_map &lt;- function(zoom, dataset) { if (!has_google_key()) { stop(&quot;Please provide a valid Google API key.&quot;) } sides &lt;- diff(range(dataset$latitude)) / 2 boundary &lt;- c( min(dataset$longitude - sides, na.rm = T), min(dataset$latitude - 0.003, na.rm = T), max(dataset$longitude + sides, na.rm = T), max(dataset$latitude + 0.003, na.rm = T) ) base_map &lt;- get_map(location = boundary, zoom = zoom, source = &quot;google&quot;) return(base_map) } plot_stop_emoji &lt;- function(dataset) { p1 &lt;- geom_emoji(data = dataset,aes(longitude, latitude), emoji = &quot;1f6d1&quot;, size = 0.05) return(p1) } plot_start_station_emoji &lt;- function(dataset) { data &lt;- dataset %&gt;% select(start_station, route_id) %&gt;% drop_na(start_station) %&gt;% mutate(name = start_station) %&gt;% left_join(stations, by = &quot;name&quot;) p2 &lt;- geom_emoji(data = data, aes(longitude, latitude), emoji = &quot;2b50&quot;, size = 0.05) return(p2) } plot_end_station_emoji &lt;- function(dataset) { data &lt;- dataset %&gt;% select(end_station, route_id) %&gt;% drop_na(end_station) %&gt;% mutate(name = end_station) %&gt;% left_join(stations, by = &quot;name&quot;) p3 &lt;- geom_emoji(data = data, aes(longitude + 0.0005, latitude + 0.0005), emoji = &quot;2733&quot;, size = 0.05) return(p3) } plot_stops &lt;- function(starting_station, stop_station, api_key, zoom = &quot;auto&quot;, location, dataset) { register_google(api_key) base_map &lt;- get_base_map(zoom = zoom, dataset = dataset) start_route &lt;- dataset %&gt;% filter(!is.na(start_station)) end_route &lt;- dataset %&gt;% filter(!is.na(end_station)) p1 &lt;- plot_start_station_emoji(dataset) p2 &lt;- plot_end_station_emoji(dataset) route_map &lt;- ggmap(base_map) + geom_point(aes(x = longitude, y = latitude, color = prop_trip_completed), data = start_route) + scale_color_gradient(low = &quot;lightblue&quot;, high = &quot;blue&quot;) + labs(color = &quot;Prop. Trip Completed&quot;) + new_scale_color() + geom_point(aes(x = longitude + 0.0007, y = latitude, color = prop_trip_completed), data = end_route) + scale_color_gradient(low = &quot;darkblue&quot;, high = &quot;gray&quot;) + labs(x = &quot;Longitude&quot;, y = &quot;Latitude&quot;, color = &quot;Prop. Trip Completed&quot;) + theme(legend.position = &quot;bottom&quot;) stops &lt;- subset(dataset, stop == &quot;Yes&quot;) if (nrow(stops) &gt; 0) { p3 &lt;- plot_stop_emoji(dataset = stops) route_map &lt;- route_map + p3 + p1 + p2 route_map } else { route_map + p1 + p2 } } get_table_data &lt;- function(dataset = NULL) { start_table &lt;- dataset %&gt;% ungroup() %&gt;% select(start_station) %&gt;% filter(!is.na(start_station)) %&gt;% unique() end_table &lt;- dataset %&gt;% ungroup() %&gt;% select(end_station) %&gt;% filter(!is.na(end_station)) %&gt;% unique() table1 &lt;- dataset %&gt;% mutate(end_times = max(time), start_times = min(time), total_times = end_times - start_times) %&gt;% select(start_times, end_times, total_times) %&gt;% unique() %&gt;% arrange(start_times) table2 &lt;- table1 %&gt;% ungroup() %&gt;% mutate( start_time = start_times[1], end_time = end_times[2], total_trip_time = end_time - start_time, stop_duration = start_times[2] - end_times[1] ) %&gt;% select(start_time,end_time, total_trip_time, stop_duration) %&gt;% unique() table2$total_trip_time &lt;- round(table2$total_trip_time, 2) table2$stop_duration &lt;- round(table2$stop_duration, 2) combined_tables &lt;- cbind(start_table, end_table, table2) combined_tables &lt;- combined_tables %&gt;% kable(booktabs = TRUE, col.names = c(&quot;Start Station&quot;, &quot;End Station&quot;, &quot;Start Time&quot;, &quot;End Time&quot;, &quot;Trip Duration&quot;, &quot;Stop Duration&quot;)) %&gt;% kable_styling(latex_options = c(&quot;HOLD_position&quot;), font_size = 8) return(combined_tables) } 8.1.1 User 1 (Trips 12-13) user_1 &lt;- stops %&gt;% select(start_station, end_station, route_id, user_id) %&gt;% filter(route_id == &quot;route_08_2020@cb1c957a-a5b9-493a-b327-b7f2cfa66a0e&quot; | route_id == &quot;route_08_2020@79b103d7-e94a-4a06-b32c-1d5fb3fb7967&quot;) %&gt;% left_join(august2020, route_id = route_id) %&gt;% group_by(route_id) %&gt;% mutate( row = row_number(), num_rows = max(row), prop_trip_completed = row / num_rows ) %&gt;% arrange(route_id, prop_trip_completed) user_1$stop &lt;- &quot;No&quot; user_1$stop[118] &lt;- &quot;Yes&quot; user_1$stop[361] &lt;- &quot;Yes&quot; user_1_part_1 &lt;- filter(user_1, route_id == &quot;route_08_2020@cb1c957a-a5b9-493a-b327-b7f2cfa66a0e&quot;) user_1_part_2 &lt;- filter(user_1, route_id == &quot;route_08_2020@79b103d7-e94a-4a06-b32c-1d5fb3fb7967&quot;) get_table_data(dataset = user_1) Start Station End Station Start Time End Time Trip Duration Stop Duration North Pleasant Street UMass Haigis Mall 2020-08-11 22:56:44 2020-08-12 00:05:14 1.14 hours 38.58 mins plot_stops(api_key = key, zoom = 14, dataset = user_1) #plot_stops(api_key = key, zoom = 15, dataset = user_1_part_1) #plot_stops(api_key = key, zoom = 15, dataset = user_1_part_2) 8.1.2 User 2 (Trips 26-27) user_2 &lt;- stops %&gt;% select(start_station, end_station, route_id, user_id) %&gt;% filter(route_id == &quot;route_06_2019@d019efa8-b176-41eb-a8c3-79f6862d8877&quot; | route_id == &quot;route_06_2019@b543b889-9973-4240-9e6c-dd28784f4915&quot;) %&gt;% left_join(june2019, route_id = route_id) %&gt;% group_by(route_id) %&gt;% mutate( row = row_number(), num_rows = max(row), prop_trip_completed = row / num_rows ) %&gt;% arrange(route_id, prop_trip_completed) user_2$stop &lt;- &quot;No&quot; user_2$stop[1276] &lt;- &quot;Yes&quot; user_2$stop[1511] &lt;- &quot;Yes&quot; user_2_part_1 &lt;- filter(user_2, route_id == &quot;route_06_2019@d019efa8-b176-41eb-a8c3-79f6862d8877&quot;) user_2_part_2 &lt;- filter(user_2, route_id == &quot;route_06_2019@b543b889-9973-4240-9e6c-dd28784f4915&quot;) get_table_data(dataset = user_2) Start Station End Station Start Time End Time Trip Duration Stop Duration Baystate Health/Chestnut Street South Holyoke 2019-06-08 21:57:40 2019-06-09 00:04:20 2.11 hours 55 secs plot_stops(api_key = key, zoom = 12, dataset = user_2) plot_stops(api_key = key, zoom = 16, dataset = user_2_part_1) #plot_stops(api_key = key, zoom = 12, dataset = user_2_part_2) 8.1.3 User 3 (Trips 41-42) user_3 &lt;- stops %&gt;% select(start_station, end_station, route_id, user_id) %&gt;% filter(route_id == &quot;route_05_2019@2f6fef2d-632e-41db-913d-51a195bfb8c1&quot; | route_id == &quot;route_05_2019@46e30988-fe99-4959-9c25-fad252667539&quot;) %&gt;% left_join(may2019, route_id = route_id) %&gt;% group_by(route_id) %&gt;% mutate( row = row_number(), num_rows = max(row), prop_trip_completed = row / num_rows ) %&gt;% arrange(route_id, prop_trip_completed) user_3$stop &lt;- &quot;No&quot; user_3$stop[649] &lt;- &quot;Yes&quot; user_3$stop[1128] &lt;- &quot;Yes&quot; user_3_part_1 &lt;- filter(user_3, route_id == &quot;route_05_2019@2f6fef2d-632e-41db-913d-51a195bfb8c1&quot;) user_3_part_2 &lt;- filter(user_3, route_id == &quot;route_05_2019@46e30988-fe99-4959-9c25-fad252667539&quot;) get_table_data(dataset = user_3) Start Station End Station Start Time End Time Trip Duration Stop Duration Main Street/Bridge Street Main Street/Bridge Street 2019-05-25 21:47:58 2019-05-25 23:48:18 2.01 hours 26.5 mins plot_stops(api_key = key, zoom = 13, dataset = user_3) #plot_stops(api_key = key, zoom = 14, dataset = user_3_part_1) #plot_stops(api_key = key, zoom = 14, dataset = user_3_part_2) 8.1.4 User 4 (Trips 52-53) user_4 &lt;- stops %&gt;% select(start_station, end_station, route_id, user_id) %&gt;% filter(route_id == &quot;route_07_2019@acfb26e9-9d3e-40bf-b219-21a1399016b0&quot; | route_id == &quot;route_07_2019@0f0457cc-c4c8-4939-a509-f1e93f5b867e&quot;) %&gt;% left_join(july2019, route_id = route_id) %&gt;% group_by(route_id) %&gt;% mutate( row = row_number(), num_rows = max(row), prop_trip_completed = row / num_rows ) %&gt;% arrange(route_id, prop_trip_completed) user_4$stop &lt;- &quot;No&quot; user_4$stop[75] &lt;- &quot;Yes&quot; user_4$stop[191] &lt;- &quot;Yes&quot; user_4_part_1 &lt;- filter(user_4, route_id == &quot;route_07_2019@acfb26e9-9d3e-40bf-b219-21a1399016b0&quot;) user_4_part_2 &lt;- filter(user_4, route_id == &quot;route_07_2019@0f0457cc-c4c8-4939-a509-f1e93f5b867e&quot;) get_table_data(dataset = user_4) Start Station End Station Start Time End Time Trip Duration Stop Duration UMass Southwest UMass Southwest 2019-07-30 01:06:39 2019-07-30 03:20:24 2.23 hours 1.97 hours plot_stops(api_key = key, zoom = 15, dataset = user_4) #plot_stops(api_key = key, zoom = 15, dataset = user_4_part_1) #plot_stops(api_key = key, zoom = 15, dataset = user_4_part_2) 8.1.5 User 5 (Trips 88-89) user_5 &lt;- stops %&gt;% select(start_station, end_station, route_id, user_id) %&gt;% filter(route_id == &quot;route_09_2019@4c3978dd-48ec-4ca7-9af2-e08518e66b7c&quot; | route_id == &quot;route_09_2019@91e61182-d511-4a4e-bbe1-86acb8e08483&quot;) %&gt;% left_join(september2019, route_id = route_id) %&gt;% group_by(route_id) %&gt;% mutate( row = row_number(), num_rows = max(row), prop_trip_completed = row / num_rows ) %&gt;% arrange(route_id, prop_trip_completed) user_5$stop &lt;- &quot;No&quot; user_5$stop[511] &lt;- &quot;Yes&quot; user_5$stop[763] &lt;- &quot;Yes&quot; user_5_part_1 &lt;- filter(user_5, route_id == &quot;route_09_2019@4c3978dd-48ec-4ca7-9af2-e08518e66b7c&quot;) user_5_part_2 &lt;- filter(user_5, route_id == &quot;route_09_2019@91e61182-d511-4a4e-bbe1-86acb8e08483&quot;) get_table_data(dataset = user_5) Start Station End Station Start Time End Time Trip Duration Stop Duration Northampton Train Station North Pleasant Street 2019-09-18 18:09:10 2019-09-18 19:13:25 1.07 hours 50 secs plot_stops(api_key = key, zoom = 12, dataset = user_5) #plot_stops(api_key = key, zoom = 14, dataset = user_5_part_1) plot_stops(api_key = key, zoom = 14, dataset = user_5_part_2) 8.2 All Secondary Stops 8.2.1 Static Visualization of All Stops center &lt;- c(lon = (max(stops$longitude) + min(stops$longitude)) / 2, lat = (max(stops$latitude) + min(stops$latitude)) / 2) map &lt;- get_map(location = center, zoom = 11) ggmap(map, base_layer = ggplot(stops, aes(x = longitude, y = latitude))) + geom_point(size = 4, alpha = 0.7, color = &quot;red&quot;, shape = 18) + labs(x = &quot;Longitude&quot;, y = &quot;Latitude&quot;) 8.2.2 Static Visualization of Stops by City cities &lt;- c(&quot;Springfield&quot;, &quot;Northampton&quot;, &quot;Holyoke&quot;, &quot;Amherst&quot;, &quot;South Hadley&quot;, &quot;Easthampton&quot;) city_plots &lt;- lapply(cities, function(city) { city_center &lt;- geocode(paste0(city, &quot;, MA&quot;)) stops &lt;- stops %&gt;% rowwise() %&gt;% filter(geosphere::distVincentyEllipsoid(c(city_center$lon, city_center$lat), c(longitude, latitude)) &lt;= 3000) map_center &lt;- c(lon = (max(stops$longitude) + min(stops$longitude)) / 2, lat = (max(stops$latitude) + min(stops$latitude)) / 2) map &lt;- get_map(location = map_center, zoom = 13) ggmap(map, base_layer = ggplot(stops, aes(x = longitude, y = latitude))) + geom_point(size = 3, alpha = 0.7, color = &quot;red&quot;, shape = 18) + labs(x = &quot;Longitude&quot;, y = &quot;Latitude&quot;, title = paste(&quot;Stops in&quot;, city)) }) cowplot::plot_grid(plotlist = city_plots, ncol = 2) 8.2.3 Interactive Visualization of All Stops leaflet(stops) %&gt;% addTiles() %&gt;% addMarkers( lng = ~longitude, lat = ~latitude, popup = ~paste(&quot;Duration:&quot;, duration, &quot;mins&quot;), icon = icons(iconUrl = &quot;resources/pin.png&quot;, iconWidth = 30, iconHeight = 30) ) "]]
